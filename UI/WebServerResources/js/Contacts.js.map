{"version":3,"sources":["Contacts/Contacts.app.js","Contacts/AddressBookController.js","Contacts/AddressBooksController.js","Contacts/CardController.js","Contacts/sgAddress.directive.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","addressbooks","templateUrl","controller","controllerAs","resolve","stateAddressbooks","addressbook","stateAddressbook","card","stateCard","stateNewCard","template","onEnter","onEnterCard","onExit","onExitCard","card@app.addressbook","otherwise","AddressBook","$findAll","window","contactFolders","$q","$state","$stateParams","_","find","id","addressbookId","selectedCard","$reload","reject","Card","tag","contactType","pid","c_component","$cards","cardObject","cardId","go","stateMailbox","runBlock","$rootScope","$log","$on","event","toState","toParams","fromState","fromParams","error","current","previous","rejection","angular","module","config","run","$inject","AddressBookController","$scope","$window","$timeout","$mdDialog","$mdToast","Account","focus","Dialog","Settings","sgHotkeys","selectCard","toggleCardSelection","$event","selectedIndex","nextSelectedIndex","i","folder","vm","selectedFolder","$selectedCard","selected","mode","multiple","shiftKey","$selectedCount","idsMap","getLength","Math","min","max","preventDefault","stopPropagation","newComponent","type","unselectCards","forEach","_nextCard","index","$selectedCardIndex","isDefined","$topIndex","length","_previousCard","_addNextCardToSelection","hasSelectedCard","_addPreviousCardToSelection","confirmDeleteSelectedCards","selectedCards","$selectedCards","size","confirm","l","ok","then","$deleteCards","_selectedCardsOperation","operation","dstId","srcFolder","allCards","cards","ids","clearCardView","promise","success","filter","$isCard","show","simple","content","position","hideDelay","$copyCards","$moveCards","map","indexOf","copySelectedCards","moveSelectedCards","selectAll","sort","field","$filter","sortedBy","$query","searchMode","search","cancelSearch","newMessage","recipients","recipientsField","accounts","account","o","$getMailboxes","mailboxes","$newMessage","message","editable","parent","element","document","body","targetEvent","clickOutsideToClose","escapeToClose","locals","stateAccount","stateMessage","newMessageWithRecipient","recipient","fn","newMessageWithSelectedCards","promises","$isList","expandable","refs","ref","email","push","$shortFormat","c_mail","all","uniq","this","hotkeys","service","keys","createHotkey","key","description","callback","bind","registerHotkey","deregisterHotkey","AddressBooksController","$mdMedia","$mdSidenav","FileUploader","sgConstant","User","select","params","editMode","value","close","newAddressbook","prompt","name","isEditable","isRemote","owner","UserLogin","$add","edit","originalAddressbook","extend","$omit","revertEditing","save","$rename","data","status","alert","confirmDelete","isSubscription","$delete","catch","response","statusText","importCards","CardsImportDialogController","scope","filterByExtension","item","isTextFile","test","join","uploader","ApplicationBaseURL","autoUpload","queueLimit","filters","onSuccessItem","headers","msg","hide","imported","onErrorItem","showLinks","LinksDialogController","urls","when","$reloadAll","showProperties","PropertiesDialogController","srcAddressBook","saveProperties","$save","init","cancel","share","$acl","$users","usersWithACL","users","subscribeToFolder","addressbookData","console","debug","$subscribe","isDroppableFolder","dstFolder","isOwned","acls","objectCreator","dragSelectedCards","activeUser","CardController","sgSettings","transformCategory","input","isString","removeAttribute","form","attribute","$setDirty","addOrg","$addOrg","addBirthday","birthday","Date","addScreenName","$addScreenName","addEmail","$addEmail","addPhone","$addPhone","addUrl","$addUrl","addAddress","$addAddress","userFilter","excludedCards","minimumSearchLength","dry","excludeLists","$valid","copy","reset","$reset","$setPristine","isNew","$fullname","toggleRawSource","showRawSource","rawSource","$$resource","post","currentFolder","allEmailTypes","$EMAIL_TYPES","allTelTypes","$TEL_TYPES","allUrlTypes","$URL_TYPES","allAddressTypes","$ADDRESS_TYPES","categories","userFilterResults","sgAddress","restrict","addressLines","lines","locality_region","street","street2","locality","region","country","postalcode","directive"],"mappings":"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","file":"Contacts.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoContacts */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.ContactsUI', ['ngCookies', 'ui.router', 'angularFileUpload', 'ck', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/addressbooks',\n        abstract: true,\n        views: {\n          addressbooks: {\n            templateUrl: 'UIxContactFoldersView', // UI/Templates/Contacts/UIxContactFoldersView.wox\n            controller: 'AddressBooksController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAddressbooks: stateAddressbooks\n        }\n      })\n      .state('app.addressbook', {\n        url: '/:addressbookId',\n        views: {\n          addressbook: {\n            templateUrl: 'addressbook',\n            controller: 'AddressBookController',\n            controllerAs: 'addressbook'\n          }\n        },\n        resolve: {\n          stateAddressbook: stateAddressbook\n        }\n      })\n      .state('app.addressbook.new', {\n        url: '/{contactType:(?:card|list)}/new',\n        views: {\n          card: {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateCard: stateNewCard\n        }\n      })\n      .state('app.addressbook.card', {\n        url: '/:cardId',\n        abstract: true,\n        views: {\n          card: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateCard: stateCard\n        },\n        onEnter: onEnterCard,\n        onExit: onExitCard\n      })\n      .state('app.addressbook.card.view', {\n        url: '/view',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactViewTemplate', // UI/Templates/Contacts/UIxContactViewTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      })\n      .state('app.addressbook.card.editor', {\n        url: '/edit',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/addressbooks/personal');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbooks.$inject = ['AddressBook'];\n  function stateAddressbooks(AddressBook) {\n    return AddressBook.$findAll(window.contactFolders);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbook.$inject = ['$q', '$state', '$stateParams', 'AddressBook'];\n  function stateAddressbook($q, $state, $stateParams, AddressBook) {\n    var addressbook = _.find(AddressBook.$findAll(), function(addressbook) {\n      return addressbook.id == $stateParams.addressbookId;\n    });\n    if (addressbook) {\n      delete addressbook.selectedCard;\n      addressbook.$reload();\n      return addressbook;\n    }\n    return $q.reject('Addressbook ' + $stateParams.addressbookId + ' not found');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewCard.$inject = ['$stateParams', 'stateAddressbook', 'Card'];\n  function stateNewCard($stateParams, stateAddressbook, Card) {\n    var tag = 'v' + $stateParams.contactType,\n        card = new Card({ pid: $stateParams.addressbookId, c_component: tag });\n    stateAddressbook.selectedCard = true;\n    return card;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCard.$inject = ['$state', '$stateParams', 'stateAddressbook'];\n  function stateCard($state, $stateParams, stateAddressbook) {\n    var card;\n\n    card = _.find(stateAddressbook.$cards, function(cardObject) {\n      return (cardObject.id == $stateParams.cardId);\n    });\n\n    if (card) {\n      return card.$reload();\n    }\n    else {\n      // Card not found\n      $state.go('app.addressbook');\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  onEnterCard.$inject = ['$stateParams', 'stateAddressbook'];\n  function onEnterCard($stateParams, stateAddressbook) {\n    stateAddressbook.selectedCard = $stateParams.cardId;\n  }\n\n  /**\n   * @ngInject\n   */\n  onExitCard.$inject = ['stateAddressbook'];\n  function onExitCard(stateMailbox) {\n    delete stateAddressbook.selectedCard;\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$state'];\n  function runBlock($rootScope, $log, $state) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('app.addressbook', { addressbookId: 'personal' });\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBookController.$inject = ['$scope', '$q', '$window', '$state', '$timeout', '$mdDialog', '$mdToast', 'Account', 'Card', 'AddressBook', 'sgFocus', 'Dialog', 'sgSettings', 'sgHotkeys', 'stateAddressbooks', 'stateAddressbook'];\n  function AddressBookController($scope, $q, $window, $state, $timeout, $mdDialog, $mdToast, Account, Card, AddressBook, focus, Dialog, Settings, sgHotkeys, stateAddressbooks, stateAddressbook) {\n    var vm = this, hotkeys = [];\n\n    AddressBook.selectedFolder = stateAddressbook;\n\n    vm.service = AddressBook;\n    vm.selectedFolder = stateAddressbook;\n    vm.selectCard = selectCard;\n    vm.toggleCardSelection = toggleCardSelection;\n    vm.newComponent = newComponent;\n    vm.unselectCards = unselectCards;\n    vm.confirmDeleteSelectedCards = confirmDeleteSelectedCards;\n    vm.copySelectedCards = copySelectedCards;\n    vm.moveSelectedCards = moveSelectedCards;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.searchMode = searchMode;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.newMessageWithSelectedCards = newMessageWithSelectedCards;\n    vm.newMessageWithRecipient = newMessageWithRecipient;\n    vm.mode = { search: false, multiple: 0 };\n\n\n    _registerHotkeys(hotkeys);\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_search'),\n        description: l('Search'),\n        callback: searchMode\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('key_create_card'),\n        description: l('Create a new address book card'),\n        callback: angular.bind(vm, newComponent, 'card')\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('key_create_list'),\n        description: l('Create a new list'),\n        callback: angular.bind(vm, newComponent, 'list')\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'space',\n        description: l('Toggle item'),\n        callback: toggleCardSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+space',\n        description: l('Toggle range of items'),\n        callback: toggleCardSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'up',\n        description: l('View next item'),\n        callback: _nextCard\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'down',\n        description: l('View previous item'),\n        callback: _previousCard\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+up',\n        description: l('Add next item to selection'),\n        callback: _addNextCardToSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+down',\n        description: l('Add previous item to selection'),\n        callback: _addPreviousCardToSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete selected card or address book'),\n        callback: confirmDeleteSelectedCards\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function selectCard(card) {\n      $state.go('app.addressbook.card.view', {cardId: card.id});\n    }\n\n    function toggleCardSelection($event, card) {\n      var folder = vm.selectedFolder,\n          selectedIndex, nextSelectedIndex, i;\n\n      if (!card)\n        card = folder.$selectedCard();\n      card.selected = !card.selected;\n      vm.mode.multiple += card.selected? 1 : -1;\n\n      // Select closest range of cards when shift key is pressed\n      if ($event.shiftKey && folder.$selectedCount() > 1) {\n        selectedIndex = folder.idsMap[card.id];\n        // Search for next selected card above\n        nextSelectedIndex = selectedIndex - 2;\n        while (nextSelectedIndex >= 0 &&\n               !folder.$cards[nextSelectedIndex].selected)\n          nextSelectedIndex--;\n        if (nextSelectedIndex < 0) {\n          // Search for next selected card bellow\n          nextSelectedIndex = selectedIndex + 2;\n          while (nextSelectedIndex < folder.getLength() &&\n                 !folder.$cards[nextSelectedIndex].selected)\n            nextSelectedIndex++;\n        }\n        if (nextSelectedIndex >= 0 && nextSelectedIndex < folder.getLength()) {\n          for (i = Math.min(selectedIndex, nextSelectedIndex);\n               i <= Math.max(selectedIndex, nextSelectedIndex);\n               i++)\n            folder.$cards[i].selected = true;\n        }\n      }\n\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function newComponent(type) {\n      $state.go('app.addressbook.new', { contactType: type });\n    }\n\n    function unselectCards() {\n      _.forEach(vm.selectedFolder.$cards, function(card) {\n        card.selected = false;\n      });\n      vm.mode.multiple = 0;\n    }\n\n    /**\n     * User has pressed up arrow key\n     */\n    function _nextCard($event) {\n      var index = vm.selectedFolder.$selectedCardIndex();\n\n      if (angular.isDefined(index)) {\n        index--;\n        if (vm.selectedFolder.$topIndex > 0)\n          vm.selectedFolder.$topIndex--;\n      }\n      else {\n        // No card is selected, show oldest card\n        index = vm.selectedFolder.$cards.length() - 1;\n        vm.selectedFolder.$topIndex = vm.selectedFolder.getLength();\n      }\n\n      if (index > -1)\n        selectCard(vm.selectedFolder.$cards[index]);\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    /**\n     * User has pressed the down arrow key\n     */\n    function _previousCard($event) {\n      var index = vm.selectedFolder.$selectedCardIndex();\n\n      if (angular.isDefined(index)) {\n        index++;\n        if (vm.selectedFolder.$topIndex < vm.selectedFolder.$cards.length)\n          vm.selectedFolder.$topIndex++;\n      }\n      else\n        // No card is selected, show newest\n        index = 0;\n\n      if (index < vm.selectedFolder.$cards.length)\n        selectCard(vm.selectedFolder.$cards[index]);\n      else\n        index = -1;\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    function _addNextCardToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedCard()) {\n        index = _nextCard($event);\n        if (index >= 0)\n          toggleCardSelection($event, vm.selectedFolder.$cards[index]);\n      }\n    }\n\n    function _addPreviousCardToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedCard()) {\n        index = _previousCard($event);\n        if (index >= 0)\n          toggleCardSelection($event, vm.selectedFolder.$cards[index]);\n      }\n    }\n\n    function confirmDeleteSelectedCards($event) {\n      var selectedCards = vm.selectedFolder.$selectedCards();\n\n      if (_.size(selectedCards) > 0)\n        Dialog.confirm(l('Warning'),\n                       l('Are you sure you want to delete the selected contacts?'),\n                       { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          vm.selectedFolder.$deleteCards(selectedCards).then(function() {\n            vm.mode.multiple = 0;\n            if (!vm.selectedFolder.selectedCard)\n              $state.go('app.addressbook');\n          });\n        });\n\n      $event.preventDefault();\n    }\n\n    /**\n     * @see AddressBooksController.dragSelectedCards\n     */\n    function _selectedCardsOperation(operation, dstId) {\n      var srcFolder, allCards, cards, ids, clearCardView, promise, success;\n\n      srcFolder = vm.selectedFolder;\n      clearCardView = false;\n      allCards = srcFolder.$selectedCards();\n      cards = _.filter(allCards, function(card) {\n        return card.$isCard();\n      });\n\n      if (cards.length != allCards.length)\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l(\"Lists can't be moved or copied.\"))\n            .position('top right')\n            .hideDelay(2000));\n\n      if (cards.length) {\n        if (operation == 'copy') {\n          promise = srcFolder.$copyCards(cards, dstId);\n          success = l('%{0} card(s) copied', cards.length);\n        }\n        else {\n          promise = srcFolder.$moveCards(cards, dstId);\n          success = l('%{0} card(s) moved', cards.length);\n          // Check if currently displayed card will be moved\n          ids = _.map(cards, 'id');\n          clearCardView = (srcFolder.selectedCard && ids.indexOf(srcFolder.selectedCard) >= 0);\n        }\n\n        // Show success toast when action succeeds\n        promise.then(function() {\n          if (clearCardView)\n            $state.go('app.addressbook');\n          $mdToast.show(\n            $mdToast.simple()\n              .content(success)\n              .position('top right')\n              .hideDelay(2000));\n        });\n      }\n    }\n\n    function copySelectedCards(folder) {\n      _selectedCardsOperation('copy', folder);\n    }\n\n    function moveSelectedCards(folder) {\n      _selectedCardsOperation('move', folder);\n    }\n\n    function selectAll() {\n      _.forEach(vm.selectedFolder.$cards, function(card) {\n        card.selected = true;\n      });\n      vm.mode.multiple = vm.selectedFolder.$cards.length;\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter('', { sort: field });\n    }\n\n    function sortedBy(field) {\n      return AddressBook.$query.sort == field;\n    }\n\n    function searchMode() {\n      vm.mode.search = true;\n      focus('search');\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter('');\n    }\n\n    function newMessage($event, recipients, recipientsField) {\n      Account.$findAll().then(function(accounts) {\n        var account = _.find(accounts, function(o) {\n          if (o.id === 0)\n            return o;\n        });\n\n        // We must initialize the Account with its mailbox\n        // list before proceeding with message's creation\n        account.$getMailboxes().then(function(mailboxes) {\n          account.$newMessage().then(function(message) {\n            message.editable[recipientsField] = recipients;\n            $mdDialog.show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: '../Mail/UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: account,\n                stateMessage: message\n              }\n            });\n          });\n        });\n      });\n    }\n\n    function newMessageWithRecipient($event, recipient, fn) {\n      var recipients = [fn + ' <' + recipient + '>'];\n      vm.newMessage($event, recipients, 'to');\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function newMessageWithSelectedCards($event, recipientsField) {\n      var selectedCards = _.filter(vm.selectedFolder.$cards, function(card) { return card.selected; });\n      var promises = [], recipients = [];\n\n      _.forEach(selectedCards, function(card) {\n        if (card.$isList({expandable: true})) {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.forEach(card.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          }\n          else {\n            promises.push(card.$reload().then(function(card) {\n              _.forEach(card.refs, function(ref) {\n                if (ref.email.length)\n                  recipients.push(ref.$shortFormat());\n              });\n            }));\n          }\n        }\n        else if (card.c_mail.length) {\n          recipients.push(card.$shortFormat());\n        }\n      });\n\n      $q.all(promises).then(function() {\n        recipients = _.uniq(recipients);\n        if (recipients.length)\n          vm.newMessage($event, recipients, recipientsField);\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBookController', AddressBookController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBooksController.$inject = ['$q', '$state', '$scope', '$rootScope', '$stateParams', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'FileUploader', 'sgConstant', 'sgHotkeys', 'sgFocus', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'User', 'stateAddressbooks'];\n  function AddressBooksController($q, $state, $scope, $rootScope, $stateParams, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, FileUploader, sgConstant, sgHotkeys, focus, Card, AddressBook, Dialog, Settings, User, stateAddressbooks) {\n    var vm = this, hotkeys = [];\n\n    vm.activeUser = Settings.activeUser;\n    vm.service = AddressBook;\n    vm.select = select;\n    vm.newAddressbook = newAddressbook;\n    vm.edit = edit;\n    vm.revertEditing = revertEditing;\n    vm.save = save;\n    vm.confirmDelete = confirmDelete;\n    vm.importCards = importCards;\n    vm.showLinks = showLinks;\n    vm.showProperties = showProperties;\n    vm.share = share;\n    vm.subscribeToFolder = subscribeToFolder;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedCards = dragSelectedCards;\n\n\n    _registerHotkeys(hotkeys);\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete selected card or address book'),\n        callback: function() {\n          if (AddressBook.selectedFolder && !AddressBook.selectedFolder.hasSelectedCard())\n            confirmDelete();\n        }\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function select($event, folder) {\n      if ($state.params.addressbookId != folder.id &&\n          vm.editMode != folder.id) {\n        vm.editMode = false;\n        AddressBook.$query.value = '';\n        // Close sidenav on small devices\n        if (!$mdMedia(sgConstant['gt-md']))\n          $mdSidenav('left').close();\n        $state.go('app.addressbook', {addressbookId: folder.id});\n      }\n      else {\n        $event.preventDefault();\n        $event.stopPropagation();\n      }\n    }\n\n    function newAddressbook() {\n      Dialog.prompt(l('New Addressbook...'),\n                    l('Name of the Address Book'))\n        .then(function(name) {\n          var addressbook = new AddressBook(\n            {\n              name: name,\n              isEditable: true,\n              isRemote: false,\n              owner: UserLogin\n            }\n          );\n          AddressBook.$add(addressbook);\n        });\n    }\n\n    function edit(folder) {\n      if (!folder.isRemote) {\n        vm.editMode = folder.id;\n        vm.originalAddressbook = angular.extend({}, folder.$omit());\n        focus('addressBookName_' + folder.id);\n      }\n    }\n\n    function revertEditing(folder) {\n      folder.name = vm.originalAddressbook.name;\n      vm.editMode = false;\n    }\n\n    function save(folder) {\n      var name = folder.name;\n      if (name && name.length > 0 && name != vm.originalAddressbook.name) {\n        folder.$rename(name)\n          .then(function(data) {\n            vm.editMode = false;\n          }, function(data, status) {\n            Dialog.alert(l('Warning'), data);\n          });\n      }\n    }\n\n    function confirmDelete() {\n      if (vm.service.selectedFolder.isSubscription) {\n        // Unsubscribe without confirmation\n        vm.service.selectedFolder.$delete()\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n          }, function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n      else {\n        Dialog.confirm(l('Warning'), l('Are you sure you want to delete the addressbook \"%{0}\"?',\n                                       vm.service.selectedFolder.name),\n                       { ok: l('Delete') })\n          .then(function() {\n            return vm.service.selectedFolder.$delete();\n          })\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n            return true;\n          })\n          .catch(function(response) {\n            if (response) {\n              var message = response.data.message || response.statusText;\n              Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                             vm.service.selectedFolder.name),\n                           message);\n            }\n          });\n      }\n    }\n\n    function importCards($event, folder) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: $event,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: 'UIxContactsImportDialog',\n        controller: CardsImportDialogController,\n        controllerAs: '$CardsImportDialogController',\n        locals: {\n          folder: folder\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      CardsImportDialogController.$inject = ['scope', '$mdDialog', 'folder'];\n      function CardsImportDialogController(scope, $mdDialog, folder) {\n        var vm = this;\n\n        vm.uploader = new FileUploader({\n          url: ApplicationBaseURL + [folder.id, 'import'].join('/'),\n          autoUpload: true,\n          queueLimit: 1,\n          filters: [{ name: filterByExtension, fn: filterByExtension }],\n          onSuccessItem: function(item, response, status, headers) {\n            var msg;\n\n            $mdDialog.hide();\n\n            if (response.imported === 0)\n              msg = l('No card was imported.');\n            else {\n              msg = l('A total of %{0} cards were imported in the addressbook.', response.imported);\n              AddressBook.selectedFolder.$reload();\n            }\n\n            $mdToast.show(\n              $mdToast.simple()\n                .content(msg)\n                .position('top right')\n                .hideDelay(3000));\n          },\n          onErrorItem: function(item, response, status, headers) {\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('An error occured while importing contacts.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n          }\n        });\n\n        vm.close = function() {\n          $mdDialog.hide();\n        };\n\n        function filterByExtension(item) {\n          var isTextFile = item.type.indexOf('text') === 0 ||\n              /\\.(ldif|vcf|vcard)$/.test(item.name);\n\n          if (!isTextFile)\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('Select a vCard or LDIF file.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n\n          return isTextFile;\n        }\n      }\n    }\n\n    function showLinks(addressbook) {\n      var promise;\n      if (addressbook.urls)\n        promise = $q.when();\n      else\n        // Refresh list of addressbooks to fetch links associated to addressbook\n        promise = AddressBook.$reloadAll();\n      promise.then(function() {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: addressbook.id + '/links',\n          controller: LinksDialogController,\n          controllerAs: 'links',\n          locals: {\n            addressbook: addressbook\n          }\n        });\n      });\n\n      /**\n       * @ngInject\n       */\n      LinksDialogController.$inject = ['$mdDialog', 'addressbook'];\n      function LinksDialogController($mdDialog, addressbook) {\n        var vm = this;\n        this.addressbook = addressbook;\n        this.close = close;\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    }\n\n    function showProperties(addressbook) {\n      $mdDialog.show({\n        templateUrl: addressbook.id + '/properties',\n        controller: PropertiesDialogController,\n        controllerAs: 'properties',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAddressBook: addressbook\n        }\n      }).catch(function() {\n        // Do nothing\n      });\n\n      /**\n       * @ngInject\n       */\n      PropertiesDialogController.$inject = ['$scope', '$mdDialog', 'srcAddressBook'];\n      function PropertiesDialogController($scope, $mdDialog, srcAddressBook) {\n        var vm = this;\n\n        vm.addressbook = new AddressBook(srcAddressBook.$omit());\n        vm.saveProperties = saveProperties;\n        vm.close = close;\n\n        function saveProperties() {\n          vm.addressbook.$save().then(function() {\n            // Refresh list instance\n            srcAddressBook.init(vm.addressbook.$omit());\n            $mdDialog.hide();\n          });\n        }\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function share(addressbook) {\n      // Fetch list of ACL users\n      addressbook.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: addressbook.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: addressbook.$acl.users,\n            User: User,\n            folder: addressbook\n          }\n        });\n      });\n    }\n\n    /**\n     * subscribeToFolder - Callback of sgSubscribe directive\n     */\n    function subscribeToFolder(addressbookData) {\n      console.debug('subscribeToFolder ' + addressbookData.owner + addressbookData.name);\n      AddressBook.$subscribe(addressbookData.owner, addressbookData.name).then(function(data) {\n         $mdToast.show(\n           $mdToast.simple()\n             .content(l('Successfully subscribed to address book'))\n             .position('top right')\n             .hideDelay(3000));\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && (dstFolder.isOwned || dstFolder.acls.objectCreator);\n    }\n\n    /**\n     * @see AddressBookController._selectedCardsOperation\n     */\n    function dragSelectedCards(srcFolder, dstFolder, mode) {\n      var dstId, allCards, cards, ids, clearCardView, promise, success;\n\n      dstId = dstFolder.id;\n      clearCardView = false;\n      allCards = srcFolder.$selectedCards();\n      if (allCards.length === 0)\n        allCards = [srcFolder.$selectedCard()];\n      cards = _.filter(allCards, function(card) {\n        return card.$isCard();\n      });\n\n      if (cards.length != allCards.length)\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l(\"Lists can't be moved or copied.\"))\n            .position('top right')\n            .hideDelay(2000));\n\n      if (cards.length) {\n        if (mode == 'copy') {\n          promise = srcFolder.$copyCards(cards, dstId);\n          success = l('%{0} card(s) copied', cards.length);\n        }\n        else {\n          promise = srcFolder.$moveCards(cards, dstId);\n          success = l('%{0} card(s) moved', cards.length);\n          // Check if currently displayed card will be moved\n          ids = _.map(cards, 'id');\n          clearCardView = (srcFolder.selectedCard && ids.indexOf(srcFolder.selectedCard) >= 0);\n        }\n\n        // Show success toast when action succeeds\n        promise.then(function() {\n          if (clearCardView)\n            $state.go('app.addressbook');\n          $mdToast.show(\n            $mdToast.simple()\n              .content(success)\n              .position('top right')\n              .hideDelay(2000));\n        });\n      }\n    }\n\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBooksController', AddressBooksController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * Controller to view and edit a card\n   * @ngInject\n   */\n  CardController.$inject = ['$scope', '$timeout', '$window', '$mdDialog', 'sgSettings', 'AddressBook', 'Card', 'Dialog', 'sgHotkeys', 'sgFocus', '$state', '$stateParams', 'stateCard'];\n  function CardController($scope, $timeout, $window, $mdDialog, sgSettings, AddressBook, Card, Dialog, sgHotkeys, focus, $state, $stateParams, stateCard) {\n    var vm = this, hotkeys = [];\n\n    vm.card = stateCard;\n\n    vm.currentFolder = AddressBook.selectedFolder;\n    vm.allEmailTypes = Card.$EMAIL_TYPES;\n    vm.allTelTypes = Card.$TEL_TYPES;\n    vm.allUrlTypes = Card.$URL_TYPES;\n    vm.allAddressTypes = Card.$ADDRESS_TYPES;\n    vm.categories = {};\n    vm.userFilterResults = [];\n    vm.transformCategory = transformCategory;\n    vm.removeAttribute = removeAttribute;\n    vm.addOrg = addOrg;\n    vm.addBirthday = addBirthday;\n    vm.addScreenName = addScreenName;\n    vm.addEmail = addEmail;\n    vm.addPhone = addPhone;\n    vm.addUrl = addUrl;\n    vm.addAddress = addAddress;\n    vm.userFilter = userFilter;\n    vm.save = save;\n    vm.close = close;\n    vm.reset = reset;\n    vm.cancel = cancel;\n    vm.confirmDelete = confirmDelete;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n\n    _registerHotkeys(hotkeys);\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete'),\n        callback: function($event) {\n          if (vm.currentFolder.$selectedCount() === 0)\n            confirmDelete();\n          $event.preventDefault();\n        }\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function transformCategory(input) {\n      if (angular.isString(input))\n        return { value: input };\n      else\n        return input;\n    }\n    function removeAttribute(form, attribute, index) {\n      vm.card.$delete(attribute, index);\n      form.$setDirty();\n    }\n    function addOrg() {\n      var i = vm.card.$addOrg({ value: '' });\n      focus('org_' + i);\n    }\n    function addBirthday() {\n      vm.card.birthday = new Date();\n    }\n    function addScreenName() {\n      vm.card.$addScreenName('');\n    }\n    function addEmail() {\n      var i = vm.card.$addEmail('');\n      focus('email_' + i);\n    }\n    function addPhone() {\n      var i = vm.card.$addPhone('');\n      focus('phone_' + i);\n    }\n    function addUrl() {\n      var i = vm.card.$addUrl('', '');\n      focus('url_' + i);\n    }\n    function addAddress() {\n      var i = vm.card.$addAddress('', '', '', '', '', '', '', '');\n      focus('address_' + i);\n    }\n    function userFilter($query, excludedCards) {\n      if ($query.length < sgSettings.minimumSearchLength())\n        return [];\n\n      return AddressBook.selectedFolder.$filter($query, {dry: true, excludeLists: true}, excludedCards).then(function(cards) {\n        return cards;\n      });\n    }\n    function save(form) {\n      if (form.$valid) {\n        vm.card.$save()\n          .then(function(data) {\n            var i = _.indexOf(_.map(AddressBook.selectedFolder.$cards, 'id'), vm.card.id);\n            if (i < 0) {\n              // New card; reload contacts list and show addressbook in which the card has been created\n              AddressBook.selectedFolder.$reload();\n            }\n            else {\n              // Update contacts list with new version of the Card object\n              AddressBook.selectedFolder.$cards[i] = angular.copy(vm.card);\n            }\n            $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n          });\n      }\n    }\n    function close() {\n      $state.go('app.addressbook').then(function() {\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n      });\n    }\n    function reset(form) {\n      vm.card.$reset();\n      form.$setPristine();\n    }\n    function cancel() {\n      vm.card.$reset();\n      if (vm.card.isNew) {\n        // Cancelling the creation of a card\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n        $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n      }\n      else {\n        // Cancelling the edition of an existing card\n        $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n      }\n    }\n    function confirmDelete() {\n      var card = stateCard;\n\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the card of %{0}?', '<b>' + card.$fullname() + '</b>'),\n                     { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          AddressBook.selectedFolder.$deleteCards([card])\n            .then(function() {\n              close();\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), l('An error occured while deleting the card \"%{0}\".',\n                                           card.$fullname()));\n            });\n        });\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Card.$$resource.post(vm.currentFolder.id + '/' + vm.card.id, \"raw\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('CardController', CardController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name sgAddress\n   * @memberof ContactsUI\n   * @desc Directive to format a postal address.\n   * @ngInject\n   */\n  function sgAddress() {\n    return {\n      restrict: 'A',\n      scope: { data: '=sgAddress' },\n      controller: ['$scope', function($scope) {\n        $scope.addressLines = function(data) {\n          var lines = [],\n              locality_region = [];\n          if (data.street) lines.push(data.street);\n          if (data.street2) lines.push(data.street2);\n          if (data.locality) locality_region.push(data.locality);\n          if (data.region) locality_region.push(data.region);\n          if (locality_region.length > 0) lines.push(locality_region.join(', '));\n          if (data.country) lines.push(data.country);\n          if (data.postalcode) lines.push(data.postalcode);\n          return lines.join('<br>');\n        };\n      }],\n      template: '<address ng-bind-html=\"addressLines(data)\"></address>'\n    };\n  }\n  \n  angular\n    .module('SOGo.Common')\n    .directive('sgAddress', sgAddress);\n})();\n"]}